openapi: 3.0.3
info:
  title: Emoji Stock Exchange API
  description: |
    Trading API for the Emoji Stock Exchange workshop. Features real-time order matching, 
    portfolio tracking, and leaderboards for competitive algorithmic trading.
  version: 1.0.0
  contact:
    name: Workshop Support
    
servers:
  - url: http://localhost:8080
    description: Local development server

security:
  - TeamId: []
    ApiKey: []

paths:
  /healthz:
    get:
      summary: Health check
      description: Returns server health status
      security: []
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
                
  /readyz:
    get:
      summary: Readiness check
      description: Returns server readiness status
      security: []
      responses:
        '200':
          description: Server is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'

  /v1/register:
    post:
      summary: Register team
      description: Register a new team and receive API key
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Team registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid team ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Team ID already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/symbols:
    get:
      summary: Get trading symbols
      description: Returns all available trading symbols with their specifications
      responses:
        '200':
          description: List of trading symbols
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SymbolInfo'

  /v1/orderbook:
    get:
      summary: Get order book
      description: Returns current order book for a symbol
      parameters:
        - name: symbol
          in: query
          required: true
          description: Trading symbol
          schema:
            type: string
            enum: ['ü¶Ñ', 'üíé', '‚ù§Ô∏è', 'üçå', 'üçæ', 'üíª']
            example: 'ü¶Ñ'
        - name: depth
          in: query
          required: false
          description: Number of price levels to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
      responses:
        '200':
          description: Order book data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBookResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/orders:
    post:
      summary: Submit order
      description: Submit a new buy or sell order
      parameters:
        - name: Idempotency-Key
          in: header
          required: false
          description: Prevents duplicate orders
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrderRequest'
      responses:
        '201':
          description: Order accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid order parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '422':
          description: Insufficient funds or shares
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'

  /v1/orders/{orderId}:
    delete:
      summary: Cancel order
      description: Cancel an existing order
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID to cancel
          schema:
            type: string
      responses:
        '200':
          description: Order cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '403':
          description: Not authorized to cancel this order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleErrorResponse'

  /v1/portfolio/{teamId}:
    get:
      summary: Get portfolio
      description: Get portfolio information for a team
      parameters:
        - name: teamId
          in: path
          required: true
          description: Team ID (must match authenticated team)
          schema:
            type: string
      responses:
        '200':
          description: Portfolio information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioResponse'
        '403':
          description: Can only access your own portfolio
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/fills:
    get:
      summary: Get trade executions
      description: Get trade executions for your team
      parameters:
        - name: since
          in: query
          required: false
          description: Sequence number for pagination
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        '200':
          description: Trade executions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FillsResponse'

  /v1/leaderboard:
    get:
      summary: Get leaderboard
      description: Get current rankings of all teams
      security: []
      responses:
        '200':
          description: Team rankings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaderboardEntry'

  /admin/pause:
    post:
      summary: Pause/resume trading
      description: Admin endpoint to pause or resume trading
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PauseRequest'
      responses:
        '200':
          description: Trading state updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResponse'

  /admin/reset:
    post:
      summary: Reset game data
      description: Reset all game data while preserving team registrations
      security:
        - AdminAuth: []
      responses:
        '200':
          description: Game data reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResponse'

  /admin/status:
    get:
      summary: Get admin status
      description: Get current game state and statistics for admin dashboard
      security:
        - AdminAuth: []
      responses:
        '200':
          description: Admin status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminStatusResponse'

  /dashboard:
    get:
      summary: Live dashboard
      description: HTML dashboard showing live leaderboard and trading status
      security: []
      responses:
        '200':
          description: HTML dashboard page
          content:
            text/html:
              schema:
                type: string

components:
  securitySchemes:
    TeamId:
      type: apiKey
      in: header
      name: X-Team-Id
      description: Team identifier
    
    ApiKey:
      type: apiKey
      in: header
      name: X-Api-Key
      description: API key received during registration
    
    AdminAuth:
      type: apiKey
      in: header
      name: X-Admin-Token
      description: Admin token for authentication

  schemas:
    RegisterRequest:
      type: object
      required:
        - teamId
      properties:
        teamId:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          description: Team identifier (letters, numbers, underscores, hyphens only)
          example: 'my-team-123'

    RegisterResponse:
      type: object
      properties:
        teamId:
          type: string
          example: 'my-team-123'
        apiKey:
          type: string
          example: '550e8400-e29b-41d4-a716-446655440000'
        initialCash:
          type: number
          format: double
          example: 10000.0

    SymbolInfo:
      type: object
      properties:
        symbol:
          type: string
          example: 'ü¶Ñ'
        priceTick:
          type: number
          format: double
          example: 0.01
        lot:
          type: integer
          example: 1
        minQuantity:
          type: integer
          example: 1
        maxQuantity:
          type: integer
          example: 1000
        enabled:
          type: boolean
          example: true

    OrderBookLevel:
      type: object
      properties:
        price:
          type: number
          format: double
          example: 5.25
        quantity:
          type: integer
          example: 100
        orderCount:
          type: integer
          example: 3

    OrderBookResponse:
      type: object
      properties:
        symbol:
          type: string
          example: 'ü¶Ñ'
        bids:
          type: array
          items:
            $ref: '#/components/schemas/OrderBookLevel'
        asks:
          type: array
          items:
            $ref: '#/components/schemas/OrderBookLevel'
        timestamp:
          type: string
          format: date-time
          example: '2025-01-01T12:00:00Z'

    PlaceOrderRequest:
      type: object
      required:
        - symbol
        - side
        - quantity
        - limitPrice
      properties:
        symbol:
          type: string
          enum: ['ü¶Ñ', 'üíé', '‚ù§Ô∏è', 'üçå', 'üçæ', 'üíª']
          example: 'ü¶Ñ'
        side:
          $ref: '#/components/schemas/OrderSide'
        quantity:
          type: integer
          minimum: 1
          maximum: 1000
          example: 10
        limitPrice:
          type: number
          format: double
          minimum: 0.01
          maximum: 1000000
          multipleOf: 0.01
          example: 5.25
        timeInForce:
          $ref: '#/components/schemas/TimeInForce'

    OrderResponse:
      type: object
      properties:
        orderId:
          type: string
          example: '550e8400-e29b-41d4-a716-446655440000'
        status:
          $ref: '#/components/schemas/OrderStatus'
        symbol:
          type: string
          example: 'ü¶Ñ'
        side:
          $ref: '#/components/schemas/OrderSide'
        quantity:
          type: integer
          example: 10
        limitPrice:
          type: number
          format: double
          example: 5.25
        filledQuantity:
          type: integer
          example: 0
        avgFillPrice:
          type: number
          format: double
          nullable: true
          example: null
        remainingQuantity:
          type: integer
          example: 10
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T12:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T12:00:00Z'

    PortfolioResponse:
      type: object
      properties:
        teamId:
          type: string
          example: 'my-team-123'
        cash:
          type: number
          format: double
          example: 9500.0
        positions:
          type: object
          additionalProperties:
            type: integer
          example:
            'ü¶Ñ': 10
            'üíé': -5
        equity:
          type: number
          format: double
          example: 9750.0
        timestamp:
          type: string
          format: date-time
          example: '2025-01-01T12:00:00Z'

    Fill:
      type: object
      properties:
        fillId:
          type: integer
          format: int64
          example: 12345
        orderId:
          type: string
          example: '550e8400-e29b-41d4-a716-446655440000'
        teamId:
          type: string
          example: 'my-team-123'
        symbol:
          type: string
          example: 'ü¶Ñ'
        side:
          $ref: '#/components/schemas/OrderSide'
        quantity:
          type: integer
          example: 5
        price:
          type: number
          format: double
          example: 5.25
        timestamp:
          type: string
          format: date-time
          example: '2025-01-01T12:00:00Z'
        seq:
          type: integer
          format: int64
          example: 100

    FillsResponse:
      type: object
      properties:
        fills:
          type: array
          items:
            $ref: '#/components/schemas/Fill'
        nextSince:
          type: integer
          format: int64
          example: 100

    LeaderboardEntry:
      type: object
      properties:
        teamId:
          type: string
          example: 'best-team'
        equity:
          type: number
          format: double
          example: 12500.0
        cash:
          type: number
          format: double
          example: 2000.0
        positionsValue:
          type: number
          format: double
          example: 10500.0
        rank:
          type: integer
          example: 1

    OrderSide:
      type: string
      enum: [BUY, SELL]
      example: BUY

    OrderStatus:
      type: string
      enum: [ACCEPTED, PARTIALLY_FILLED, FILLED, CANCELLED]
      example: ACCEPTED

    TimeInForce:
      type: string
      enum: [GTC, IOC]
      default: GTC
      description: |
        - GTC: Good Till Canceled
        - IOC: Immediate or Cancel

    StatusResponse:
      type: object
      properties:
        status:
          type: string
          example: 'healthy'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: 'Invalid request'

    AdminStatusResponse:
      type: object
      properties:
        gameState:
          $ref: '#/components/schemas/GameStateInfo'
        stats:
          $ref: '#/components/schemas/StatsInfo'

    PauseRequest:
      type: object
      required:
        - paused
      properties:
        paused:
          type: boolean
          example: true

    AdminResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Trading paused successfully'
        gameState:
          $ref: '#/components/schemas/GameStateInfo'

    GameStateInfo:
      type: object
      properties:
        paused:
          type: boolean
          example: false
        lastStateChange:
          type: string
          format: date-time
          example: '2025-01-01T12:00:00Z'

    StatsInfo:
      type: object
      properties:
        activeTeams:
          type: integer
          format: int64
          example: 5
        totalOrders:
          type: integer
          format: int64
          example: 150
        totalFills:
          type: integer
          format: int64
          example: 75

    SimpleErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: 'Invalid request'

    SimpleMessageResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Operation completed successfully'

    RateLimitErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: 'Rate limit exceeded'
        retryAfterSeconds:
          type: integer
          format: int64
          example: 1

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Forbidden:
      description: Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    UnprocessableEntity:
      description: Valid request but cannot be processed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RateLimitErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'